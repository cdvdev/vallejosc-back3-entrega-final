import { describe, it } from "mocha";
import supertest from "supertest";
import { expect } from "chai";
import mongoose, { isValidObjectId } from "mongoose";
import fs from "fs"

const requester = supertest("http://localhost:8080")


describe("Pruebas router pets", function () {
    this.timeout(10_000); //2000
    
    before(async () => {
        await mongoose.connect(`mongodb+srv://user1:pass11@cluster0.etjvq.mongodb.net/74590?retryWrites=true&w=majority&appName=Cluster0`)
    })

    after(async () => {
        await mongoose.connection.collection("pets").deleteMany({ specie: "test" });
    })

    describe("Test basicos router /api/pets", () => {

        it("Si envio los datos correctos de una mascota al /api/pets con el metodo POST, da el alta a una mascota",async () => {
            let petMock = {
                name: "Rocky",
                specie: "test",
                birthDate: new Date(2025, 11, 8).toUTCString()
            }
            
            // let result = await requester.post("/api/pets").send(petMock);
            // let {status, body} = await requester.post("/api/pets").send(petMock);
            let {status} = await requester.post("/api/pets").send(petMock);
            // console.log(result);
            
            // expect(status).to.be.eq(200);
            // expect(body.payload).to.has.property("_id");
            // expect(isValidObjectId(body.payload._id)).to.be.eq(true);
            
            expect(status).to.be.eq(200);

        })
        
        // it("Si envio los datos incompletos de una mascota al /api/pets con el metodo POST, me retorna un error", async () => {
                    
        //      expect(1).to.be.eq(1).and.to.be.greaterThan(0);

        // })
    })
    
    describe("Test complejos router /api/pets", () => {

        let petMock = {
                name: "Rocky",
                specie: "test",
                birthDate: new Date(2025, 11, 8).toUTCString()
            }

        it("Si envio los datos incompletos de una mascota al /api/pets/withimage con el metodo POST, me retorna un error", async () => {
            
            let {status, body} = await requester.post("/api/pets/withimage")   //.send(petMock);
                                                .field("name", petMock.name)
                                                .field("specie",petMock.specie)
                                                .field("birthDate", petMock.birthDate)
                                                .attach("image", "./img-roger.jpg")  
                                                
            // console.log(body);                                    

            expect(body.payload.image).to.be.ok;
            expect(fs.existsSync(body.payload.image)).to.be.eq(true)
            fs.unlinkSync(body.payload.image)
        })
        
    })

    // describe("Session routes", () => {
    //     it("La ruta /api/session/login perimite autenticar un user, y retorna una cookie que contiene un token", async () => {

    //         let userMock = {
    //              first_name:"marcelo",
    //             last_name:"gallardo",
    //             email:"gallardom@river.com",
    //             password:"123"
    //         }

    //         let {headers, body} = await requester.post("/api/sessions/login").send(userMock) 
            
            
    //         console.log("headers")
    //         console.log(headers)
    //         console.log(body)

    //         let nameCookie = headers["set-cookie"][0].split("=")[0]
    //         expect(nameCookie).to.be.equal("coderCookie")

    //         console.log(nameCookie)
    //     })

    // })
});